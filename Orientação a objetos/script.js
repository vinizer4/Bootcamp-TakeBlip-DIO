// Aula 1

// Paradigmas 
// Orienta√ß√£o a Objetos

/*

Paradigmas 

Imperativo           Declarativo
Procedural           Logic
Object Processing    Functional  -  Dataflow
Parallel Procesing   Database

*/

/* Na orienta√ß√£o a objetos os programas s√£o "objetos"
que possuem uma s√©rie de propriedades.

Pilares:

- Heran√ßa
- Polimorfismo
- Ebcapsulamento
- Abstra√ß√£o

*/

/* Abstra√ß√£o

"Processo mental que consiste em isolar um aspecto determinado de um estado de coisas relativamente complexo, a fim de simplificar a sua avalia√ß√£o, classifica√ß√£o ou para permitir a comunica√ß√£o do mesmo" 

*/

/* Heran√ßa

O objeto filho herda propriedades e metodos do objeto pai, mas tem suas proprias caracteristicas

*/

/* Encapsulamento

Cada classe tem propriedades e m√©todos independentes do restante do c√≥digo.

*/

/* Polimorfismo


Objetos podem herdar a mesma classe pai, mas se comportarem de forma diferente quando invocamos seus m√©todos

*/

//  AULA 2

/* Prot√≥tipos

Todos os objetos Javascript herdam propriedades e m√©todos de um prototype.

O objeto Object.prototype est√° no todo desta cadeia:

const objeto = {}
undefined
objeto
{}
[[Prototype]]: Object
constructor: ∆í Object()
hasOwnProperty: ∆í hasOwnProperty()
isPrototypeOf: ∆í isPrototypeOf()
propertyIsEnumerable: ∆í propertyIsEnumerable()
toLocaleString: ∆í toLocaleString()
toString: ∆í toString()
valueOf: ∆í valueOf()
__defineGetter__: ∆í __defineGetter__()
__defineSetter__: ∆í __defineSetter__()
__lookupGetter__: ∆í __lookupGetter__()
__lookupSetter__: ∆í __lookupSetter__()
__proto__: (‚Ä¶)
get __proto__: ∆í __proto__()
set __proto__: ∆í __proto__()

*/

/* Classes

Syntatic sugar: uma sintaxe feita para facilitar a escrita

// Apartir do ECMAscrip 6 conseguimos utilizar classe em javascript para facilitar a escrita

Ex:

// 1. sem utilizar classe

var Meal = function(food) {
    this.food = food
}

Meal.prototype.eat = function() {
    return 'üòã'
}

// 2. utilizando classe

class Meal {
    constructor (food) {
        this.food = food
    }

    eat() {
        return 'üòã'
    }
}

Javascript n√£o possui classes nativamente. Todas as classes s√£o objetos e a heran√ßa se d√° por prot√≥tipos.

*/

